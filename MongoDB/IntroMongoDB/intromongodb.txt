//1. Create a database called 'my_first_db'

use my_first_db

//2. Create students collection 
//collection = table in MySql

db.createCollection('students')

//3. Each document you insert into this collection should have the following format: 
//({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})\

//4. Create 5 students with the appropriate info.

db.students.insert({name: 'Kira Yamato', home_state: 'WA', lucky_number: 7, birthday: {month: 5, day: 1, year: 1990}})
db.students.insert({name: 'Athrun Zala', home_state: 'WA', lucky_number: 4, birthday: {month: 5, day: 1, year: 1990}})
db.students.insert({name: 'Amuro Ray', home_state: 'NY', lucky_number: 1, birthday: {month: 1, day: 2, year: 1992}})
db.students.insert({name: 'Hattori Kenzo', home_state: 'CA', lucky_number: 9, birthday: {month: 11, day: 21, year: 1997}})
db.students.insert({name: 'Char Aznable', home_state: 'MA', lucky_number: 8, birthday: {month: 11, day: 17, year: 1992}})
db.students.insert({name: 'Shinn Asuka', home_state: 'FL', lucky_number: 5, birthday: {month: 4, day: 4, year: 1991}})

//5. Get all students

db.students.find().pretty()

//6. Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo)

db.students.find({$or: [{home_state: 'CA'}, {home_state: 'WA'}]})

//7.Get all students whose lucky number is:
// - 1 greater than 3

db.students.find({lucky_number: {$gt:3}}).pretty()

//- 2 less than or equal to 10
db.students.find({lucky_number: {$lte:10}}).pretty()

//- 3 between 1 and 9(inclusive)
db.students.find({$and: [{lucky_number: {$gte:1}}, {lucky_number: {$lte:9}}]})

//8. Add a field to each student collection called 'interests' that is an ARRAY.  
//It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.

db.students.update({}, {$set: {'interests': ['coding', 'brunch', 'MongoDB']}},false, true)

// note to myself :
//last 2 fields false, true specifies the upsert and multi flags.
//Upsert: If set to true, creates a new document when no document matches the query criteria.
//Multi: If set to true, updates multiple documents that meet the query criteria. If set to false, updates one document.

//9. Add some unique interests for each particular student into each of their interest arrays.

db.students.update({_id" : ObjectId("5bb7b78fd20d1fe7252bed76")},{$push : {interests: 'Java'}})

//10. Add the interest 'taxes' into someone's interest array.

db.students.update({_id : ObjectId("5bb7b77ed20d1fe7252bed75")}, {$push : {interests: 'taxes'}})

//11. Remove the 'taxes' interest you just added.

db.students.update({_id : ObjectId("5bb7b77ed20d1fe7252bed75")}, {$pop : {interests: 1}})

//12.  Remove all students who are from California (or Washington).

db.students.remove({$or: [{home_state:'CA'}, {home_state: 'WA'}]})

//13. Remove a student by name.

db.students.remove({name: 'Shinn Asuka'})

//14. Remove a student whose lucky number is greater than 5 (JUST ONE)

db.students.remove({lucky_number: {$gt: 5}},true)

//15. Add a field to each student collection called 'number_of_belts' and set it to 0.

db.students.update({},{$set: {number_of_belts: 0}},false, true)

//16. Increment this field by 1 for all students in Washington (Seattle Dojo).

db.students.update({home_state:'WA'},{$inc: {number_of_belts: 1}},true, true)

//17. Rename the 'number_of_belts' field to 'belts_earned'

db.students.updateMany({},{$rename: {'number_of_belts': 'belts_earned'}})

//18. Remove the 'lucky_number' field.
db.students.update({}, {$unset: {lucky_number:1 }},false,true )

//19. Add a 'updated_on' field, and set the value as the current date.
db.students.update({}, {$set : {updated_on: Date()}}, false, true)